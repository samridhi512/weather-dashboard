{"version":3,"sources":["components/SearchBar.jsx","components/WeatherCard.jsx","components/Forecast.jsx","components/ErrorMessage.jsx","components/Loader.jsx","components/ThemeToggle.jsx","components/RecentSearches.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","_ref","onSearch","city","setCity","useState","React","createElement","onSubmit","e","preventDefault","trim","className","type","placeholder","value","onChange","target","WeatherCard","data","darkTheme","name","main","weather","wind","iconUrl","icon","src","alt","description","Math","round","temp","feels_like","humidity","speed","pressure","Forecast","groupedByDay","list","forEach","item","day","Date","dt","toLocaleDateString","weekday","month","push","dailyData","Object","keys","map","items","maxTemp","max","temp_max","minTemp","min","temp_min","representativeItem","floor","length","slice","index","key","ErrorMessage","message","Loader","ThemeToggle","toggleTheme","onClick","title","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","RecentSearches","searches","onSelect","search","App","weatherData","setWeatherData","forecastData","setForecastData","loading","setLoading","error","setError","setDarkTheme","recentSearches","setRecentSearches","useEffect","savedSearches","localStorage","getItem","JSON","parse","savedTheme","document","body","classList","add","remove","setItem","stringify","fetchWeather","async","cityName","API_KEY","weatherResponse","axios","get","updatedSearches","filter","updateRecentSearches","forecastResponse","err","refreshWeather","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.104ba070.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst SearchBar = ({ onSearch }) => {\r\n  const [city, setCity] = useState(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (city.trim()) {\r\n      onSearch(city);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"flex w-full\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter city name...\"\r\n        value={city}\r\n        onChange={(e) => setCity(e.target.value)}\r\n        className=\"flex-grow p-3 border rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n      />\r\n      <button\r\n        type=\"submit\"\r\n        className=\"bg-blue-500 hover:bg-blue-600 text-white p-3 rounded-r-lg transition-colors\"\r\n      >\r\n        Search\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\n\r\nconst WeatherCard = ({ data, darkTheme }) => {\r\n  const { name, main, weather, wind } = data;\r\n  const iconUrl = `https://openweathermap.org/img/wn/${weather[0].icon}@2x.png`;\r\n\r\n  return (\r\n    <div className={`p-6 rounded-lg shadow-md text-center transition-all ${darkTheme ? 'bg-gray-800' : 'bg-white'}`}>\r\n      <div className=\"flex justify-center items-center mb-2\">\r\n        <h2 className=\"text-2xl font-bold\">{name}</h2>\r\n        <img src={iconUrl} alt=\"Weather icon\" className=\"h-16 w-16\" />\r\n      </div>\r\n      <p className=\"text-xl mb-3\">{weather[0].description}</p>\r\n      <div className=\"grid grid-cols-2 gap-4\">\r\n        <div className=\"text-center\">\r\n          <p className=\"text-3xl font-bold\">{Math.round(main.temp)}°C</p>\r\n          <p className=\"text-sm opacity-75\">Feels like: {Math.round(main.feels_like)}°C</p>\r\n        </div>\r\n        <div className=\"grid grid-cols-1 gap-2\">\r\n          <p>Humidity: {main.humidity}%</p>\r\n          <p>Wind: {wind.speed} km/h</p>\r\n          <p>Pressure: {main.pressure} hPa</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React from \"react\";\r\n\r\nconst Forecast = ({ data, darkTheme }) => {\r\n  // Group forecast data by day\r\n  const groupedByDay = {};\r\n  \r\n  data.list.forEach(item => {\r\n    const date = new Date(item.dt * 1000);\r\n    const day = date.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' });\r\n    \r\n    if (!groupedByDay[day]) {\r\n      groupedByDay[day] = [];\r\n    }\r\n    \r\n    groupedByDay[day].push(item);\r\n  });\r\n  \r\n  // Get daily average/max/min\r\n  const dailyData = Object.keys(groupedByDay).map(day => {\r\n    const items = groupedByDay[day];\r\n    \r\n    // Find max temp for the day\r\n    const maxTemp = Math.max(...items.map(item => item.main.temp_max));\r\n    // Find min temp for the day\r\n    const minTemp = Math.min(...items.map(item => item.main.temp_min));\r\n    // Use noon forecast or the middle forecast for the day for icon/description\r\n    const middleIndex = Math.floor(items.length / 2);\r\n    const representativeItem = items[middleIndex];\r\n    \r\n    return {\r\n      day,\r\n      maxTemp,\r\n      minTemp,\r\n      icon: representativeItem.weather[0].icon,\r\n      description: representativeItem.weather[0].description\r\n    };\r\n  }).slice(0, 5); // Ensure we only show 5 days\r\n  \r\n  return (\r\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-5 gap-3\">\r\n      {dailyData.map((day, index) => (\r\n        <div key={index} className={`p-4 rounded-md shadow-sm text-center ${darkTheme ? 'bg-gray-800' : 'bg-white'}`}>\r\n          <p className=\"font-semibold\">{day.day}</p>\r\n          <img \r\n            src={`https://openweathermap.org/img/wn/${day.icon}.png`} \r\n            alt={day.description} \r\n            className=\"mx-auto h-12 w-12\" \r\n          />\r\n          <p className=\"text-sm mb-1\">{day.description}</p>\r\n          <div className=\"flex justify-around\">\r\n            <span className=\"font-bold\">{Math.round(day.maxTemp)}°</span>\r\n            <span className=\"opacity-75\">{Math.round(day.minTemp)}°</span>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Forecast;\r\n","import React from \"react\";\r\n\r\nconst ErrorMessage = ({ message }) => {\r\n  return (\r\n    <div className=\"bg-red-100 border-l-4 border-red-500 text-red-700 p-4 my-4 rounded\">\r\n      <p>{message}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import React from \"react\";\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"flex justify-center my-4\">\r\n      <div className=\"loader animate-spin rounded-full border-t-4 border-blue-500 border-solid h-12 w-12\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;","import React from \"react\";\r\n\r\nconst ThemeToggle = ({ darkTheme, toggleTheme }) => {\r\n  return (\r\n    <button\r\n      onClick={toggleTheme}\r\n      className={`p-2 rounded-md ${darkTheme ? 'bg-gray-700 text-yellow-400' : 'bg-blue-200 text-gray-800'}`}\r\n      title={darkTheme ? \"Switch to light mode\" : \"Switch to dark mode\"}\r\n    >\r\n      {darkTheme ? (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\" />\r\n        </svg>\r\n      ) : (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\" />\r\n        </svg>\r\n      )}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ThemeToggle;","import React from \"react\";\r\n\r\nconst RecentSearches = ({ searches, onSelect }) => {\r\n  return (\r\n    <div className=\"mt-4 mb-6\">\r\n      <p className=\"text-sm mb-2\">Recent searches:</p>\r\n      <div className=\"flex flex-wrap gap-2\">\r\n        {searches.map((search, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={() => onSelect(search)}\r\n            className=\"bg-blue-100 hover:bg-blue-200 text-blue-800 px-3 py-1 rounded-full text-sm transition-colors\"\r\n          >\r\n            {search}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecentSearches;\r\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport SearchBar from \"./components/SearchBar\";\nimport WeatherCard from \"./components/WeatherCard\";\nimport Forecast from \"./components/Forecast\";\nimport ErrorMessage from \"./components/ErrorMessage\";\nimport Loader from \"./components/Loader\";\nimport ThemeToggle from \"./components/ThemeToggle\";\nimport RecentSearches from \"./components/RecentSearches\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [weatherData, setWeatherData] = useState(null);\n  const [forecastData, setForecastData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [darkTheme, setDarkTheme] = useState(false);\n  const [recentSearches, setRecentSearches] = useState([]);\n\n  useEffect(() => {\n    // Load recent searches from localStorage\n    const savedSearches = localStorage.getItem(\"recentSearches\");\n    if (savedSearches) {\n      setRecentSearches(JSON.parse(savedSearches));\n    }\n\n    // Load theme preference from localStorage\n    const savedTheme = localStorage.getItem(\"darkTheme\");\n    if (savedTheme) {\n      setDarkTheme(JSON.parse(savedTheme));\n    }\n  }, []);\n\n  // Update theme class on the body element\n  useEffect(() => {\n    if (darkTheme) {\n      document.body.classList.add(\"dark-theme\");\n    } else {\n      document.body.classList.remove(\"dark-theme\");\n    }\n    localStorage.setItem(\"darkTheme\", JSON.stringify(darkTheme));\n  }, [darkTheme]);\n\n  const updateRecentSearches = (cityName) => {\n    const updatedSearches = [cityName, ...recentSearches.filter(item => item !== cityName)].slice(0, 5);\n    setRecentSearches(updatedSearches);\n    localStorage.setItem(\"recentSearches\", JSON.stringify(updatedSearches));\n  };\n\n  const fetchWeather = async (cityName) => {\n    if (!cityName.trim()) return;\n    \n    setLoading(true);\n    setError(\"\");\n    \n    try {\n      const API_KEY = \"050e872f4fc1d4016a13436414218ec7\"; // Replace with your API key\n      \n      // Fetch current weather data\n      const weatherResponse = await axios.get(\n        `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${API_KEY}&units=metric`\n      );\n      \n      setWeatherData(weatherResponse.data);\n      setCity(cityName);\n      updateRecentSearches(cityName);\n      \n      // Fetch 5-day forecast data\n      const forecastResponse = await axios.get(\n        `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=${API_KEY}&units=metric`\n      );\n      \n      setForecastData(forecastResponse.data);\n    } catch (err) {\n      setError(\"City not found or API error. Please try again.\");\n      setWeatherData(null);\n      setForecastData(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleTheme = () => {\n    setDarkTheme(!darkTheme);\n  };\n\n  const refreshWeather = () => {\n    if (city) {\n      fetchWeather(city);\n    }\n  };\n\n  return (\n    <div className={`min-h-screen flex flex-col items-center p-4 ${darkTheme ? 'bg-gray-900 text-white' : 'bg-blue-100 text-gray-800'}`}>\n      <header className=\"w-full max-w-3xl flex justify-between items-center mb-6\">\n        <h1 className=\"text-3xl font-bold\">Weather Dashboard</h1>\n        <ThemeToggle darkTheme={darkTheme} toggleTheme={toggleTheme} />\n      </header>\n      \n      <div className=\"w-full max-w-3xl\">\n        <SearchBar onSearch={fetchWeather} />\n        \n        {recentSearches.length > 0 && (\n          <RecentSearches searches={recentSearches} onSelect={fetchWeather} />\n        )}\n        \n        {loading && <Loader />}\n        {error && <ErrorMessage message={error} />}\n        \n        <div className=\"mt-6\">\n          {weatherData && (\n            <div className=\"mb-6\">\n              <div className=\"flex justify-between items-center mb-2\">\n                <h2 className=\"text-xl font-semibold\">Current Weather</h2>\n                <button \n                  onClick={refreshWeather}\n                  className={`p-2 rounded-full ${darkTheme ? 'bg-blue-600 hover:bg-blue-700' : 'bg-blue-500 hover:bg-blue-600'} text-white transition-colors`}\n                  title=\"Refresh weather data\"\n                >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                  </svg>\n                </button>\n              </div>\n              <WeatherCard data={weatherData} darkTheme={darkTheme} />\n            </div>\n          )}\n          \n          {forecastData && (\n            <div>\n              <h2 className=\"text-xl font-semibold mb-2\">5-Day Forecast</h2>\n              <Forecast data={forecastData} darkTheme={darkTheme} />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}